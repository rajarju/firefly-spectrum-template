{"id":"../node_modules/@adobe/exc-app/src/Global.js","dependencies":[{"name":"/Users/arjunraj/workshop/firefly-app-template/node_modules/@adobe/exc-app/src/Global.js.map","includedInParent":true,"mtime":1593150770703},{"name":"/Users/arjunraj/workshop/firefly-app-template/node_modules/@adobe/exc-app/src/Global.ts","includedInParent":true,"mtime":1593150770703},{"name":"/Users/arjunraj/workshop/firefly-app-template/package.json","includedInParent":true,"mtime":1593150899877},{"name":"/Users/arjunraj/workshop/firefly-app-template/node_modules/@adobe/exc-app/package.json","includedInParent":true,"mtime":1593150770703}],"generated":{"js":"\"use strict\";\n/*************************************************************************\n * Copyright 2020 Adobe\n * All Rights Reserved.\n *\n * NOTICE: Adobe permits you to use, modify, and distribute this file in\n * accordance with the terms of the Adobe license agreement accompanying\n * it. If you have received this file from a source other than Adobe,\n * then your use, modification, or distribution of it requires the prior\n * written permission of Adobe.\n **************************************************************************/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Gets the implementation for the module.\n * @ignore\n * @param moduleName THe name of the module.\n * @returns The implementation.\n */\nfunction getImpl(moduleName) {\n    const emr = window['exc-module-runtime'];\n    if (!emr) {\n        throw new Error('module-runtime APIs not available.');\n    }\n    return emr[moduleName];\n}\nexports.getImpl = getImpl;\n/**\n * Connects attributes of the specified API.\n * @ignore\n * @param apiName Name of the API.\n * @param attributes The attributes to connect.\n * @returns The API instance.\n */\nfunction connect(apiName, attributes) {\n    const api = {};\n    attributes.forEach(feature => {\n        const featureName = feature[0];\n        if (feature[1]) {\n            api[featureName] = ((...args) => {\n                return getImpl(apiName)[featureName](...args);\n            });\n        }\n        else {\n            Object.defineProperty(api, featureName, {\n                get: () => {\n                    return getImpl(apiName)[featureName];\n                },\n                set: value => {\n                    getImpl(apiName)[featureName] = value;\n                }\n            });\n        }\n    });\n    return api;\n}\nexports.connect = connect;\nexports.default = window;\n"},"sourceMaps":{"js":{"version":3,"file":"Global.js","sourceRoot":"","sources":["Global.ts"],"names":[],"mappings":";AAAA;;;;;;;;;4EAS4E;;AA0C5E;;;;;GAKG;AACH,SAAgB,OAAO,CAA0B,UAAa;IAC5D,MAAM,GAAG,GAAI,MAAiB,CAAC,oBAAoB,CAAC,CAAC;IACrD,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;KACvD;IACD,OAAO,GAAG,CAAC,UAAU,CAAC,CAAC;AACzB,CAAC;AAND,0BAMC;AAED;;;;;;GAMG;AACH,SAAgB,OAAO,CAA0B,OAAU,EAAE,UAA0C;IACrG,MAAM,GAAG,GAAG,EAAgB,CAAC;IAC7B,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QAC3B,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAC/B,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;YACd,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,IAAW,EAAE,EAAE;gBACrC,OAAQ,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,CAAS,CAAC,GAAG,IAAI,CAAC,CAAC;YACzD,CAAC,CAAQ,CAAC;SACX;aAAM;YACL,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,WAAW,EAAE;gBACtC,GAAG,EAAE,GAAG,EAAE;oBACR,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC;gBACvC,CAAC;gBACD,GAAG,EAAE,KAAK,CAAC,EAAE;oBACX,OAAO,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;gBACxC,CAAC;aACF,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACb,CAAC;AApBD,0BAoBC;AAED,kBAAgB,MAAiB,CAAC","sourcesContent":["/*************************************************************************\n * Copyright 2020 Adobe\n * All Rights Reserved.\n *\n * NOTICE: Adobe permits you to use, modify, and distribute this file in\n * accordance with the terms of the Adobe license agreement accompanying\n * it. If you have received this file from a source other than Adobe,\n * then your use, modification, or distribution of it requires the prior\n * written permission of Adobe.\n **************************************************************************/\n\n/**\n * @packageDocumentation\n * @module \"index\"\n */\nimport {ComponentsApi} from '../components';\nimport {HelpCenterApi} from '../helpcenter';\nimport {MetricsApi} from '../metrics';\nimport {NetworkApi} from '../network';\nimport {Nps} from '../nps';\nimport {OrgSwitcherApi} from '../orgswitcher';\nimport {PageApi} from '../page';\nimport {PulseApi} from '../pulse';\nimport Runtime from './Runtime';\nimport {SettingsApi} from '../settings';\nimport {TopbarApi} from '../topbar';\nimport {UserApi} from '../user';\nimport {UserProfileApi} from '../userprofile';\n\nexport interface Modules {\n  readonly components: ComponentsApi;\n  readonly default: (options?: any) => Runtime;\n  readonly helpCenter: HelpCenterApi;\n  readonly metrics: MetricsApi;\n  readonly network: NetworkApi;\n  readonly nps: Nps;\n  readonly orgSwitcher: OrgSwitcherApi;\n  readonly page: PageApi;\n  readonly pulse: () => PulseApi;\n  runtime: Runtime;\n  readonly settings: () => SettingsApi;\n  readonly topbar: TopbarApi;\n  readonly user: () => UserApi;\n  readonly userProfile: UserProfileApi;\n}\n\ntype Global = typeof window & {\n  readonly 'exc-module-runtime': Modules;\n  EXC_MR_READY: () => void;\n};\n\n/**\n * Gets the implementation for the module.\n * @ignore\n * @param moduleName THe name of the module.\n * @returns The implementation.\n */\nexport function getImpl<T extends keyof Modules>(moduleName: T): Modules[T] {\n  const emr = (window as Global)['exc-module-runtime'];\n  if (!emr) {\n    throw new Error('module-runtime APIs not available.');\n  }\n  return emr[moduleName];\n}\n\n/**\n * Connects attributes of the specified API.\n * @ignore\n * @param apiName Name of the API.\n * @param attributes The attributes to connect.\n * @returns The API instance.\n */\nexport function connect<T extends keyof Modules>(apiName: T, attributes: [keyof Modules[T], boolean?][]): Modules[T] {\n  const api = {} as Modules[T];\n  attributes.forEach(feature => {\n    const featureName = feature[0];\n    if (feature[1]) {\n      api[featureName] = ((...args: any[]) => {\n        return (getImpl(apiName)[featureName] as any)(...args);\n      }) as any;\n    } else {\n      Object.defineProperty(api, featureName, {\n        get: () => {\n          return getImpl(apiName)[featureName];\n        },\n        set: value => {\n          getImpl(apiName)[featureName] = value;\n        }\n      });\n    }\n  });\n  return api;\n}\n\nexport default (window as Global);\n"]}},"error":null,"hash":"a6c08a75101cfe210da546dc7e14734a","cacheData":{"env":{}}}